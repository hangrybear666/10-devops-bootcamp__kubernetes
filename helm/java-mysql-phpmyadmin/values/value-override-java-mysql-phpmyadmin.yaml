# override with --set in helm install command
ecrImageRepository: 010928217051.dkr.ecr.eu-central-1.amazonaws.com
ecrImageName: k8s-imgs
nodeBalancerPublicDns: 143-42-222-246.ip.linodeusercontent.com
javaImageTag: java-app-2.3
# secrets
imagePullSecrets: aws-ecr-config
javaMysqlEnvSecret: java-app-mysql-env
# mysql
mysqlAppName: mysql
xtrabackupAppName: xtrabackup
mysqlReplicaCount: 3
mysqlConfig:
  primary: |
    # Apply this config only on the primary.
    [mysqld]
    log-bin
  replica: |
    # Apply this config only on replicas.
    [mysqld]
    super-read-only
xtrabackupImage: gcr.io/google-samples/xtrabackup:1.0
mysqlImage: mysql:5.7
mysqlContainerPort: 3306
xtrabackupContainerPort: 3307
cpuRequestedMysql: 300m
memoryRequestedMysql: 512Mi
cpuLimitMysql: 500m
memoryLimitMysql: 768Mi

mysqlLivenessProbeCommand:
  - "/bin/bash"
  - "-c"
  - "mysqladmin ping -h 127.0.0.1 -u root -p$MYSQL_ROOT_PASSWORD"
mysqlReadinessProbeCommand:
  - "/bin/bash"
  - "-c"
  - "mysql -h 127.0.0.1 -u $MYSQL_USER -p$MYSQL_PASSWORD -e 'SELECT 1'"

mysqlVolumeMounts:
- name: data
  mountPath: /var/lib/mysql
  subPath: mysql
- name: conf
  mountPath: /etc/mysql/conf.d

mysqlInitVolumeMounts:
- name: conf
  mountPath: /mnt/conf.d
- name: config-map
  mountPath: /mnt/config-map

xtrabackupVolumeMounts:
- name: data
  mountPath: /var/lib/mysql
  subPath: mysql
- name: conf
  mountPath: /etc/mysql/conf.d

xtrabackupCloneVolumeMounts:
- name: data
  mountPath: /var/lib/mysql
  subPath: mysql
- name: conf
  mountPath: /etc/mysql/conf.d

mysqlVolumes:
- name: conf
  emptyDir: {}
- name: config-map
  configMap:
    name: mysql
mysqlVolumeClaimTemplates:
- metadata:
    name: data
  spec:
    accessModes: ["ReadWriteOnce"]
    storageClassName: linode-block-storage
    resources:
      requests:
        storage: 10Gi
# phpmyadmin
phpmyadminAppName: phpmyadmin
phpmyadminReplicaCount: 1
phpmyadminImage: phpmyadmin:5.2.1-apache
phpmyadminData:
  pma-host: mysql-0.mysql
  pma-port: "3306"
  pma-arbitrary-server-address: "1"
phpmyadminEnv:
  - name: PMA_ABSOLUTE_URI
    key: pma-absolute-uri
  - name: PMA_HOST
    key: pma-host
  - name: PMA_PORT
    key: pma-port
  - name: PMA_ARBITRARY
    key: pma-arbitrary-server-address
phpmyadminContainerPort: 80
phpmyadminServicePort: 80
phpmyadminIngressPath: /phpmyadmin(/|$)(.*)
# java-app
javaAppName: java-app
javaContainerPort: 8080
javaServicePort: 80
javaIngressPath: "/"
javaAppCpuRequested: 150m
javaAppMemoryRequested: 192Mi
javaAppCpuLimit: 250m
javaAppMemoryLimit: 320Mi
# bash commands
mysqlInitCommand: |
  set -ex
  # Generate mysql server-id from pod ordinal index.
  [[ $HOSTNAME =~ -([0-9]+)$ ]] || exit 1
  ordinal=${BASH_REMATCH[1]}
  echo [mysqld] > /mnt/conf.d/server-id.cnf
  # Add an offset to avoid reserved server-id=0 value.
  echo server-id=$((100 + $ordinal)) >> /mnt/conf.d/server-id.cnf
  # Copy appropriate conf.d files from config-map to emptyDir.
  if [[ $ordinal -eq 0 ]]; then
    cp /mnt/config-map/primary.cnf /mnt/conf.d/
  else
    cp /mnt/config-map/replica.cnf /mnt/conf.d/
  fi
xtrabackupBashCmd: |
  set -ex
  cd /var/lib/mysql

  # Determine binlog position of cloned data, if any.
  if [[ -f xtrabackup_slave_info && "x$(<xtrabackup_slave_info)" != "x" ]]; then
    # XtraBackup already generated a partial "CHANGE MASTER TO" query
    # because we're cloning from an existing replica. (Need to remove the tailing semicolon!)
    cat xtrabackup_slave_info | sed -E 's/;$//g' > change_master_to.sql.in
    # Ignore xtrabackup_binlog_info in this case (it's useless).
    rm -f xtrabackup_slave_info xtrabackup_binlog_info
  elif [[ -f xtrabackup_binlog_info ]]; then
    # We're cloning directly from primary. Parse binlog position.
    [[ `cat xtrabackup_binlog_info` =~ ^(.*?)[[:space:]]+(.*?)$ ]] || exit 1
    rm -f xtrabackup_binlog_info xtrabackup_slave_info
    echo "CHANGE MASTER TO MASTER_LOG_FILE='${BASH_REMATCH[1]}',\
          MASTER_LOG_POS=${BASH_REMATCH[2]}" > change_master_to.sql.in
  fi

  # Check if we need to complete a clone by starting replication.
  if [[ -f change_master_to.sql.in ]]; then
    echo "Waiting for mysqld to be ready (accepting connections)"
    until mysql -h 127.0.0.1 -u root -p$MYSQL_ROOT_PASSWORD -e "SELECT 1"; do sleep 1; done

    echo "Initializing replication from clone position"
    mysql -h 127.0.0.1 \
          -u root -p$MYSQL_ROOT_PASSWORD \
          -e "$(<change_master_to.sql.in), \
                  MASTER_HOST='mysql-0.mysql', \
                  MASTER_USER='root', \
                  MASTER_PASSWORD='$MYSQL_ROOT_PASSWORD', \
                  MASTER_CONNECT_RETRY=10; \
                START SLAVE;" || exit 1
    # In case of container restart, attempt this at-most-once.
    mv change_master_to.sql.in change_master_to.sql.orig
  fi

  # Start a server to send backups when requested by peers.
  exec ncat --listen --keep-open --send-only --max-conns=1 3307 -c \
    "xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root --password=$MYSQL_ROOT_PASSWORD"
xtrabackupCloneCommand: |
  set -ex
  # Skip the clone if data already exists.
  [[ -d /var/lib/mysql/mysql ]] && exit 0
  # Skip the clone on primary (ordinal index 0).
  [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
  ordinal=${BASH_REMATCH[1]}
  [[ $ordinal -eq 0 ]] && exit 0
  # Clone data from previous peer.
  ncat --recv-only mysql-$(($ordinal-1)).mysql 3307 | xbstream -x -C /var/lib/mysql
  # Prepare the backup.
  xtrabackup --prepare --target-dir=/var/lib/mysql
